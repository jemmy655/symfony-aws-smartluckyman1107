<?php

namespace App\Repository\Liquidity;

use App\Entity\CurrencyPair;
use App\Entity\Liquidity\ExternalOrder;
use App\Model\PriceInterface;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\ORM\QueryBuilder;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * @method ExternalOrder|null find($id, $lockMode = null, $lockVersion = null)
 * @method ExternalOrder|null findOneBy(array $criteria, array $orderBy = null)
 * @method ExternalOrder[]    findAll()
 * @method ExternalOrder[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class ExternalOrderRepository extends ServiceEntityRepository
{
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, ExternalOrder::class);
    }

    public function clear()
    {
        parent::clear(); // TODO: Change the autogenerated stub
    }

    /**
     * @param CurrencyPair $currencyPair
     * @return bool
     */
    public function prepareForRemovalByCurrencyPair(CurrencyPair $currencyPair) {
        /** @var QueryBuilder $qb */
        $qb = $this->_em->createQueryBuilder();
        $qb->update('App:Liquidity\ExternalOrder', 'eo')
            ->set('eo.removed', true)
            ->where('eo.currencyPair = :currencyPair')
            ->setParameter('currencyPair', $currencyPair);

        $qb->getQuery()->execute();

        return true;
    }

    /**
     * @param CurrencyPair $currencyPair
     * @return bool
     */
    public function removeByCurrencyPair(CurrencyPair $currencyPair) {
        /** @var QueryBuilder $qb */
        $qb = $this->_em->createQueryBuilder();
        $qb->delete('App:Liquidity\ExternalOrder', 'eo')
            ->where('eo.currencyPair = :currencyPair')
            ->andWhere('eo.removed = TRUE')
            ->setParameter('currencyPair', $currencyPair);

        $qb->getQuery()->execute();

        return true;
    }

    /**
     * @param CurrencyPair $currencyPair
     * @param int $orderType
     * @param $requitedAmount
     * @return string|null
     */
    public function findLiquidityLimitPrice(CurrencyPair $currencyPair, int $orderType, $requitedAmount) : ?string
    {
        if($orderType === ExternalOrder::TYPE_BUY){
            $dqlOrderBy = 'ORDER BY eo.liquidityRate DESC, eo.id ASC';
        }elseif($orderType === ExternalOrder::TYPE_SELL){
            $dqlOrderBy = 'ORDER BY eo.liquidityRate ASC, eo.id ASC';
        }else{
            return null;
        }

        $query = $this->_em->createQuery("
            SELECT eo.liquidityAmount, eo.liquidityRate
            FROM App:Liquidity\ExternalOrder eo
            LEFT JOIN eo.currencyPair cp
            WHERE
                eo.rate > 0 AND eo.amount > 0 AND
                eo.type = :orderType AND
                cp.id = :currencyPairId
            ".$dqlOrderBy."
        ");
        $query->setParameter('orderType', $orderType);
        $query->setParameter('currencyPairId', $currencyPair->getId());

        $result = $query->getResult();
        if($result){
            $limitPrice = null;
            $totalFreeAmount = 0;

            foreach($result as $item){
                $totalFreeAmount = bcadd($totalFreeAmount, $item['liquidityAmount'], PriceInterface::BC_SCALE);
                $comp = bccomp($totalFreeAmount, $requitedAmount, PriceInterface::BC_SCALE);
                if($comp === 0 || $comp === 1){
                    return $item['liquidityRate'];
                }
            }

            return $limitPrice;
        }

        return null;
    }

    /**
     * @param CurrencyPair $currencyPair
     * @param int $orderType
     * @param $requitedPrice
     * @return string|null
     */
    public function findLiquidityAmount(CurrencyPair $currencyPair, int $orderType, $requitedPrice) : ?string
    {
        if($orderType === ExternalOrder::TYPE_BUY){
            $dqlOrderBy = 'ORDER BY eo.liquidityRate DESC, eo.id ASC';
        }elseif($orderType === ExternalOrder::TYPE_SELL){
            $dqlOrderBy = 'ORDER BY eo.liquidityRate ASC, eo.id ASC';
        }else{
            return null;
        }

        $query = $this->_em->createQuery("
            SELECT eo.liquidityAmount, eo.liquidityRate
            FROM App:Liquidity\ExternalOrder eo
            LEFT JOIN eo.currencyPair cp
            WHERE
                eo.rate > 0 AND eo.amount > 0 AND
                eo.type = :orderType AND
                cp.id = :currencyPairId
            ".$dqlOrderBy."
        ");
        $query->setParameter('orderType', $orderType);
        $query->setParameter('currencyPairId', $currencyPair->getId());

        $result = $query->getResult();

        if($result){
            $amount = null;
            $totalFree = 0;

            foreach($result as $item){
                $mul = bcmul($item['liquidityAmount'], $item['liquidityRate'], PriceInterface::BC_SCALE);
                $totalFree = bcadd($totalFree, $mul, PriceInterface::BC_SCALE);

                $comp = bccomp($totalFree, $requitedPrice, PriceInterface::BC_SCALE);
                if($comp === 0 || $comp === 1){
                    return bcdiv($requitedPrice, $item['liquidityRate'], PriceInterface::BC_SCALE);
                }
            }
        }

        return null;
    }

    /**
     * @param CurrencyPair $currencyPair
     * @param int $orderType
     * @param float $limitPrice
     * @return array|null
     */
    public function findLiquidity(CurrencyPair $currencyPair, int $orderType, float $limitPrice) : ?array
    {
        if($orderType === ExternalOrder::TYPE_BUY){
            $dqlWhere = 'eo.liquidityRate >= :liquidityRate AND';
            $dqlOrderBy = 'ORDER BY eo.liquidityRate DESC, eo.id ASC';
        }elseif($orderType === ExternalOrder::TYPE_SELL){
            $dqlWhere = 'eo.liquidityRate <= :liquidityRate AND';
            $dqlOrderBy = 'ORDER BY eo.liquidityRate ASC, eo.id ASC';
        }else{
            return null;
        }

        $query = $this->_em->createQuery("
            SELECT eo
            FROM App:Liquidity\ExternalOrder eo
            LEFT JOIN eo.currencyPair cp
            WHERE
                eo.rate > 0 AND eo.amount > 0 AND
                eo.type = :orderType AND
                ".$dqlWhere."
                cp.id = :currencyPairId
            ".$dqlOrderBy."
        ");
        $query->setParameter('orderType', $orderType);
        $query->setParameter('liquidityRate', $limitPrice);
        $query->setParameter('currencyPairId', $currencyPair->getId());

        $result = $query->getResult();

        if(count($result) > 0) return $result;

        return null;
    }

    /**
     * @param CurrencyPair $currencyPair
     * @param bool $forCombined
     * @param int|null $limit
     * @return array|null
     */
    public function findBidsArray(CurrencyPair $currencyPair, bool $forCombined = false, int $limit = null) : ?array
    {
        $query = $this->_em->createQuery("
            SELECT o, cp, bc, qc
            FROM App:Liquidity\ExternalOrder o  
            LEFT JOIN o.currencyPair cp  
            LEFT JOIN cp.baseCurrency bc  
            LEFT JOIN cp.quotedCurrency qc  
            WHERE 
                o.type = :typeBuy AND   
                cp.id = :currencyPairId AND
                o.liquidityAmount > :liquidityAmount
            GROUP BY o.id
            ORDER BY o.liquidityRate DESC
        ");
        $query->setParameter('typeBuy', ExternalOrder::TYPE_BUY);
        $query->setParameter('currencyPairId', $currencyPair->getId());
        $query->setParameter('liquidityAmount', $forCombined ? $currencyPair->getExternalOrderMinAmount() : 0);
        if(!is_null($limit)) $query->setMaxResults($limit);

        $result = $query->getArrayResult();

        if(count($result) > 0) return $result;

        return null;
    }

    /**
     * @param CurrencyPair $currencyPair
     * @param bool $forCombined
     * @param int|null $limit
     * @return array|null
     */
    public function findOffersArray(CurrencyPair $currencyPair, bool $forCombined = false, int $limit = null) : ?array
    {
        $query = $this->_em->createQuery("
            SELECT o, cp, bc, qc
            FROM App:Liquidity\ExternalOrder o
            LEFT JOIN o.currencyPair cp  
            LEFT JOIN cp.baseCurrency bc  
            LEFT JOIN cp.quotedCurrency qc
            WHERE 
                o.type = :typeSell AND 
                cp.id = :currencyPairId AND
                o.liquidityAmount > :liquidityAmount
            GROUP BY o.id    
            ORDER BY o.liquidityRate ASC
        ");
        $query->setParameter('typeSell', ExternalOrder::TYPE_SELL);
        $query->setParameter('currencyPairId', $currencyPair->getId());
        $query->setParameter('liquidityAmount', $forCombined ? $currencyPair->getExternalOrderMinAmount() : 0);
        if(!is_null($limit)) $query->setMaxResults($limit);

        $result = $query->getArrayResult();

        if(count($result) > 0) return $result;

        return null;
    }

    /**
     * @param ExternalOrder $externalOrder
     * @return ExternalOrder
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function save(ExternalOrder $externalOrder)
    {
        $this->_em->persist($externalOrder);
        $this->_em->flush();

        return $externalOrder;
    }

    /**
     * @param ExternalOrder $externalOrder
     * @return bool
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function remove(ExternalOrder $externalOrder){
        $this->_em->remove($externalOrder);
        $this->_em->flush();

        return true;
    }

    /**
     * @param ExternalOrder $externalOrder
     */
    public function detach(ExternalOrder $externalOrder){
        $this->_em->detach($externalOrder);
    }


    // /**
    //  * @return ExternalOrder[] Returns an array of ExternalOrder objects
    //  */
    /*
    public function findByExampleField($value)
    {
        return $this->createQueryBuilder('e')
            ->andWhere('e.exampleField = :val')
            ->setParameter('val', $value)
            ->orderBy('e.id', 'ASC')
            ->setMaxResults(10)
            ->getQuery()
            ->getResult()
        ;
    }
    */

    /*
    public function findOneBySomeField($value): ?ExternalOrder
    {
        return $this->createQueryBuilder('e')
            ->andWhere('e.exampleField = :val')
            ->setParameter('val', $value)
            ->getQuery()
            ->getOneOrNullResult()
        ;
    }
    */
}
